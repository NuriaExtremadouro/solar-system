{"version":3,"sources":["fragments/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["a11yProps","index","id","SimpleTabs","React","useState","value","setValue","push","useHistory","AppBar","position","style","background","Grid","container","xs","Hidden","xsDown","sm","paddingLeft","paddingRight","Tabs","onChange","event","newValue","aria-label","Tab","label","onClick","Home","lazy","Planets","Asteroids","App","fallback","color","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bdbb8a11.chunk.js","sourcesContent":["import React from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nexport default function SimpleTabs() {\n  const [value, setValue] = React.useState(0);\n  const { push } = useHistory();\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\" style={{ background: '#353a46' }}>\n        <Grid container xs={12}>\n          <Hidden xsDown>\n            <Grid xs={1} sm={3} />\n          </Hidden>\n          <Grid xs={12} sm={6} style={{ paddingLeft: '10px', paddingRight: '10px' }}>\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n              <Tab label=\"Home\" onClick={() => push('/home')} {...a11yProps(0)} />\n              <Tab label=\"Planets\" onClick={() => push('/planets')} {...a11yProps(1)} />\n              <Tab label=\"Asteroids\" onClick={() => push('/asteroids')} {...a11yProps(2)} />\n            </Tabs>\n          </Grid>\n          <Hidden xsDown>\n            <Grid xs={1} sm={3} />\n          </Hidden>\n        </Grid>\n      </AppBar>\n    </>\n  );\n}\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from './fragments/Header';\nconst Home = React.lazy(() => import ('./screens/Home'));\nconst Planets = React.lazy(() => import ('./screens/Planets'));\nconst Asteroids = React.lazy(() => import ('./screens/Asteroids'));\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Header />\n        <Suspense fallback={<div style={{color: '#fff'}}>Loading...</div>}>\n            <Switch>\n              <Route path=\"/planets\">\n                <Planets />\n              </Route>\n              <Route path=\"/asteroids\">\n                <Asteroids />\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n        </Suspense>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}